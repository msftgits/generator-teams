{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Yo Teams - the Microsoft Teams app generator","text":"<p>A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development. Yo Teams allows you to build Microsoft Teams applications based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies.</p> <p>Yo Teams allows you to build Microsoft Teams applications based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies. Including support for extending Teams app sto other parts of the Microsoft 365 eco-system. More info at https://aka.ms/extendteamsapps.</p> <p>This generator is built and maintained by the community, for the community.</p>"},{"location":"#generator-support","title":"Generator support:","text":"<ul> <li>Microsoft Teams Tabs</li> <li>Including support for configuring Tabs as SharePoint Web Parts of full page applications</li> <li>Including support for Single-Sign-On Tabs</li> <li>Including support for full screen tabs</li> <li>Including a dedicated scaffolding option for Microsoft Viva Connection tabs</li> <li>Microsoft Bot Framework Bots</li> <li>Based on Bot Framework 4.9+</li> <li>Support for calling (audio and video)</li> <li>Microsoft Teams Message extensions and actions</li> <li>Multiple configuration options using adaptive cards, task modules, static parameters</li> <li>Support for configuration and settings</li> <li>Link unfurling</li> <li>Microsoft Teams and Outlook connectors</li> <li>Microsoft Teams outgoing web hooks</li> <li>Personal Tabs for Office.com, Outlook and Outlook on the web</li> </ul> <p>The generated project is ready to run and deploy to Azure and includes a variety of features such as modifying the Microsoft Teams schema, support for Azure Application Insights, a pluggable framework to add additional features.</p> <p>For more information about developing custom Microsoft Teams app see the Microsoft Teams developer documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>The Teams generator is distributed as an NPM package. If you have the Yeoman tool and the Gulp CLI task manager installed you can install the generator globally using:</p> <pre><code>npm i -g generator-teams\n</code></pre> <p>or using yarn:</p> <pre><code>yarn global add generator-teams\n</code></pre> <p>See the User Guide to learn more about the Teams generator, how to set it up and its capabilities.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Open up a command prompt and create a new directory where you want to create your project and in that directory type the command <code>yo teams</code>. This will start the Teams Apps generator and you will be asked a set of questions. </p> <pre><code>yo teams\n</code></pre> <p>After answering several questions you can select what items you want added to your new project. You can select a single one or any combination of items.</p> <p>See the Build your first Microsoft Teams app to learn more on how to create your first Microsoft Teams app project.</p>"},{"location":"#microsoft-365-patterns-and-practices","title":"Microsoft 365 Patterns and Practices","text":"<p>The Teams generator is an open-source project driven by the Microsoft 365 Patterns and Practices initiative. The project is built and managed publicly on GitHub at https://github.com/pnp/generator-teams and accepts community contributions. We would encourage you to try it and tell us what you think. We would also love your help! We have a number of feature requests that are a good starting point to contribute to the project.</p> <p>\u201cSharing is caring\u201d</p> <p>Microsoft 365 Patterns and Practices team</p>"},{"location":"about/halloffame/","title":"yo Teams Hall of fame","text":"<ul> <li>Wictor Wil\u00e9n - Original author and coordinator</li> </ul>"},{"location":"about/halloffame/#project-coordinators-maintainers","title":"Project coordinators &amp; maintainers","text":"<ul> <li>Rick Van Rousselt</li> <li>Albert-Jan Schot</li> <li>Thomas G\u00f6lles</li> <li>Stephan Bisser</li> </ul>"},{"location":"about/halloffame/#contributors","title":"Contributors","text":"<ul> <li>Bill Bliss</li> <li>Richard DiZerega</li> <li>Elaine van Bergen</li> <li>Daniel Laskewitz</li> <li>Paul Schaeflein</li> <li>Cagdas Davulcu</li> <li>Stefan Bauer</li> <li>Andrew Connell</li> <li>Ralf Brennscheidt</li> <li>Felipe Plets</li> <li>Brendan Andrade</li> <li>Jason Merino</li> <li>Orta Therox</li> <li>Oleksandr Fediashov</li> <li>Paolo Pialorsi</li> <li>Nanddeep Nachan</li> <li>Sergei Sergeev</li> <li>Elia</li> <li>Luise Freese</li> <li>Robert Pocklington</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>Copyright (c) Microsoft Corporation. All rights reserved.</p> <p>MIT License</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/telemetry/","title":"Telemetry","text":"<p>The <code>generator-teams</code> package and the build packages (<code>yoteams-build-core</code> and <code>yoteams-deploy</code>) includes a telemetry feature that collects usage data and exception information when the generator or build package tasks crashes. It's important that the <code>generator-teams</code> team understands how the generator and the build packages are used so they can be improved. </p>"},{"location":"about/telemetry/#scope","title":"Scope","text":"<p><code>generator-teams</code> is collecting telemetry about what configuration is used when scaffolding a new project. </p> <p>The build packages is collecting telemetry about what tasks are being used when building or debugging a project.</p> <p>Telemetry isn't collected from using the generated project or when the generated project is running.</p>"},{"location":"about/telemetry/#how-to-opt-out","title":"How to opt out","text":"<p>Telemetry is enabled by default. To opt out of the telemetry feature set the <code>YOTEAMS_TELEMETRY_OPTOUT</code> environment variable to \u00b41\u00b4 or \u00b4true\u00b4. To opt out of telemetry feature when scaffolding a project use the <code>-no-telemetry</code> flag in combination with the <code>yo teams</code> command.</p>"},{"location":"about/telemetry/#data-points","title":"Data points","text":"<p>The telemetry feature doesn't collect personal data, such as usernames or email addresses. It does not scan your code and does not extract project-level data, such as name, repository, or author. The data is sent and secured securely to Microsoft servers using the Azure Monitor technology.</p> <p>The following data is collected:</p> <ul> <li>Name and arguments of Gulp tasks used</li> <li>Version of <code>generator-teams</code> used</li> <li>Version of <code>yoteams-*</code> build and helper packages used</li> <li>Client type and operating system</li> <li>Location (city, province and country)</li> <li>Configuration options (excluding any values) when scaffolding a project</li> </ul> <p>Protecting your privacy is important to us. If you suspect telemetry is collecting sensitive data or the data is being insecurely or inappropriately handled, file an issue in the pnp/generator-teams repository.</p>"},{"location":"about/why-generator/","title":"Why Yo Teams - the Microsoft Teams app generator?","text":"<p>A Yeoman Generator for Microsoft Teams Apps projects. The most comprehensive and complete development toolkit for Microsoft Teams development. Yo Teams allows you to build Microsoft Teams applications on any platform based on TypeScript and node.js on your terms, in your editor of choice, without any external or online dependencies.</p> <p>This generator is built and maintained by the community, for the community.</p>"},{"location":"about/why-generator/#supportability-and-sla","title":"Supportability and SLA","text":"<p>This library is open-source and community provided library with active community providing support for it. This is not Microsoft provided module so there's no SLA or direct support for this open-source component from Microsoft. Please report any issues using the issues list.</p>"},{"location":"concepts/ngrok/","title":"Using ngrok for local development and hosting","text":"<p>In order to make development locally a great experience it is recommended to use ngrok, which allows you to publish the localhost on a public DNS, so that you can consume the bot and the other resources in Microsoft Teams.</p> <p>Microsoft Teams is a cloud-based product and requires that your tab content is available from the cloud using HTTPS endpoints. Teams doesn't allow local hosting. Publish your tab to a public URL or use a proxy that exposes your local port to an internet-facing URL.</p> <p>To use ngrok, it is recommended to use the <code>gulp ngrok-serve</code> command, which will read your ngrok settings from the <code>.env</code> file and automatically create a correct manifest file and finally start a local development server using the ngrok settings.</p>"},{"location":"concepts/ngrok/#note-on-ngrok-and-wsl2","title":"Note on ngrok and WSL2","text":"<p>When running a Yo Teams generated solution on WSL2 with ngrok you might experience issues like Failed to complete tunnel connection. Try running ngrok as a separate process pointing to your local IP instead of localhost. For more information see: https://github.com/pnp/generator-teams/issues/189</p>"},{"location":"concepts/project-structure/","title":"Project Structure","text":"<p>The generated project from the Microsoft Teams Apps generator has the following project and file/folder structure.</p>"},{"location":"concepts/project-structure/#the-root-folder","title":"The root folder","text":"<p>The root folder contains all the required files you need to build and run your project.</p> <ul> <li><code>gulpfile.js</code> contains configuration for the Gulp tasks. See <code>yoteams-core-build</code> for more information</li> <li><code>README-XXX.md</code> automatically generated readme file to help you get started</li> <li><code>.env</code> contains replaceable strings that will be used throughout your project and make it easier for you to move projects between environments.</li> <li><code>Dockerfile</code> a pre-configured Docker file</li> </ul>"},{"location":"concepts/project-structure/#the-src-folder","title":"The <code>src</code> folder","text":"<p>The source folder contains your code and is divided into the following folders:</p> <ul> <li><code>client</code>: contains clients side TypeScript code</li> <li><code>manifest</code>: contains the Microsoft Teams App manifest and icons</li> <li><code>public</code>: contains static web site files</li> <li><code>server</code>: contains server side code</li> <li><code>test</code>: contains test setup files. Note: only added if tests are chosen during initial scaffolding</li> </ul>"},{"location":"concepts/project-structure/#the-manifest-folder","title":"The <code>manifest</code> folder","text":"<p>The <code>manifest</code> folder contains the manifest file (<code>manifest.json</code>) as well as the two required logos. The manifest file uses replaceable tokens.</p>"},{"location":"concepts/project-structure/#the-client-folder","title":"The <code>client</code> folder","text":"<p>The <code>client</code> folder contains the client side React components. All scaffolded client side components are automatically added to <code>client.ts</code>.</p>"},{"location":"concepts/project-structure/#the-server-folder","title":"The <code>server</code> folder","text":"<p>The <code>server</code> folder contains the server side  Express application, defined in <code>server.ts</code>. </p> <p>The <code>TeamsAppsComponents.ts</code> file is used to export all classes for automatic Express routing detection, that uses the express-msteams-host npm package for the routing setup.</p>"},{"location":"concepts/project-structure/#the-public-folder","title":"The <code>public</code> folder","text":"<p>The folder called <code>public</code> contains all the files required for the web application, such as html, assets and css files. </p>"},{"location":"contributing/contribution-guidelines/","title":"Contribution guidelines","text":"<p>#yoTeams is a community-driven initiative which is open for new ideas as well as for volunteers helping us make it even better and better. Therefore, if you are interested in contributing to this project, we'd like you to read through the contribution guidelines so you know how to contribute to this project.</p>"},{"location":"contributing/contribution-guidelines/#you-have-a-new-idea-for-yoteams","title":"You have a new idea for #yoTeams","text":"<p>Great, we always love to add more features and capabilities to #yoTeams! But in case that there is already the same or a similar idea listed in our issue list we would like you to check that list before you submit a new issue. If your ideas is not in that list, then please add a new issue in the issue list of type <code>Feature request</code> and fill out the form with your idea (please describe it as precise as possible so we have a clear understanding what you want to achieve with it).</p> <p>NOTE: If you want to add the idea or feature to the project yourself, please just state that in the issue form.</p>"},{"location":"contributing/contribution-guidelines/#you-have-found-a-bug-in-yoteams","title":"You have found a bug in #yoTeams","text":"<p>We try our best to avoid any bugs, but sometimes they do happen though. So if you encounter a bug while using #yoTeams please check if that bug is already part of our issue list and if not we would like to know what problems you encountered. So feel free to add a new issue of type <code>Bug report</code> in the issue list along with information about the bug itself and how to reproduce it. If there is anything unclear to us or we cannot reproduce the bug, we will ask you for clarification to get things sorted out.</p>"},{"location":"contributing/contribution-guidelines/#fixing-typos","title":"Fixing typos","text":"<p>Typos are embarrassing! Most PR's that fix typos will be accepted immediately. In order to make it easier to review the PR, please narrow the focus instead of sending a huge PR of fixes.</p>"},{"location":"contributing/contribution-guidelines/#dos-donts","title":"DO's &amp; DON'Ts","text":"<ul> <li>DO follow the same project and test structure as the existing project.</li> <li>DO include tests when adding new functionality and features. When fixing bugs, start with adding a test that highlights how the current behavior is broken.</li> <li>DO keep discussions focused. When a new or related topic comes up it's often better to create new issue than to side track the conversation.</li> <li>DO NOT submit PR's for coding style changes.</li> <li>DO NOT surprise us with big PR's. Instead file an issue &amp; start a discussion so we can agree on a direction before you invest a large amount of time.</li> <li>DO NOT commit code you didn't write.</li> <li>DO NOT submit PR's that refactor existing code without a discussion first.</li> </ul>"},{"location":"contributing/getting-started/","title":"Getting started","text":"<p>If you are not currently familiar with Yeoman generator development you will find some helpful links.</p>"},{"location":"contributing/getting-started/#basic-technologies-to-know","title":"Basic technologies to know","text":"<ul> <li> <p>Write your own Yeoman generator - This article provides you with basic insights on how to write a custom Yeoman generator</p> </li> <li> <p>Mocha getting started - To test that the Yeoman generator is working properly a testing framework named Mocha is used</p> </li> <li> <p>Embedded JavaScript templating - EJS is the core engine used in Yeoman to deploy template files and dynamically embed custom settings in the files getting deployed</p> </li> </ul>"},{"location":"contributing/getting-started/#places-to-look-for-help","title":"Places to look for help","text":"<p>The JavaScript a Yeoman generator uses is based on Node.js and many things are treated differently than in the JavaScript that exists in browsers.</p> <ul> <li> <p>Yeoman API Documentation -  Besides the getting started guide, there is official documentation available that covers the complete Yeoman API</p> </li> <li> <p>Node.js documentation - In general, a Yeoman generator is written in JavaScript but it is based on Node.js where the development patterns are slightly different. In some cases it might be handy to consult the Node.js documentation.</p> </li> </ul>"},{"location":"contributing/minimal-path/","title":"Minimal Path to Awesome","text":"<p>The shortest way to prepare your local copy of the project for development and testing.</p>"},{"location":"contributing/minimal-path/#install-prerequisites","title":"Install prerequisites","text":"<p>Our prerequisites are the same as when you first installed the Teams Generator</p>"},{"location":"contributing/minimal-path/#get-a-local-version-of-the-teams-generator","title":"Get a local version of the Teams Generator","text":"<ol> <li>Fork this repository</li> <li>Clone your fork</li> <li>Navigate to the correct directory for the package you want to make a change to. The Teams generator is split into 3 different parts:<ul> <li>generator-teams</li> <li>yoteams-build-core</li> <li>yoteams-deploy</li> </ul> </li> <li> <p>in the command line:</p> <ul> <li>run <code>npm i</code> to restore dependencies</li> </ul> <p></p> <ul> <li>run <code>npm run build</code> to build the project</li> </ul> <p></p> <ul> <li>run <code>npm test</code> to run unit tests (optional this can take a while)</li> </ul> </li> </ol> <p>If you installed the Generator globally using the <code>npm install generator-teams --global</code> command, we recommend that you uninstall it first, before running <code>npm link</code> </p> <p>run <code>npm link</code> to install the project locally. After linking the local package, we recommend that you create a empty folder in another drive where you can run the locally installed version of the Teams generator.</p> <p></p> <p>Now you can start with changing the generator code. (In this example we are changing the first question)</p> <p></p> <p>After changing the code, run the <code>npm run build</code> command to rebuild the project and see your changes integrated in the local version of the Teams generator.</p> <p></p> <p>If you renamed files:</p> <p>in the command line: - run <code>npm run clean</code> to clean up the output folder - run <code>npm run build</code> to rebuild the project - run <code>npm link</code> to reinstall the project locally. Without this step, you will get an error, when trying to start the local version of the generator.</p> <p>Don't forget to add tests if you add logic.</p>"},{"location":"contributing/minimal-path/#documentation","title":"Documentation","text":"<p>The Microsoft Teams Generator uses MkDocs to publish documentation pages. For simplicity, we recommend using the MkDocs Material Docker container which contains all dependencies installed.</p>"},{"location":"contributing/minimal-path/#preview-docs-using-the-docker-container","title":"Preview docs using the Docker container","text":"<p>If you're using Visual Studio Code and have the Docker extension installed, you can run preview the docs using the container either by executing the <code>Run docs container</code> task, or, if you have pulled the image previously, from the Images pane by running the MkDocs container interactively. This article explains working with Docker containers using VSCode in more detail.</p> <p>More information on how to use the Visual Studio Code extension please visit the tutorial</p> <p>To run tasks easily from Visual Studio Code you can use the Task explorer. With this you can easily start the <code>run doc container</code></p> <p></p> <p>Or you can start the docs container interactive, if you like to see the what's going on in an interactive screen. </p> <p></p> <p>Alternatively, you can run the container in command-line:</p> <ul> <li>on macOS:<ul> <li>run <code>cd ./docs</code> to change directory to where the docs are stored</li> <li>run <code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material</code> to start the local web server with MkDocs and view the documentation in the web browser</li> </ul> </li> <li>on Windows:<ul> <li>run <code>docker run --rm -it -p 8000:8000 -v c:/projects/cli-microsoft365/docs:/docs squidfunk/mkdocs-material</code> to start the local web server with MkDocs and view the    documentation in the web browser</li> </ul> </li> </ul>"},{"location":"contributing/minimal-path/#preview-docs-using-mkdocs-installed-on-your-machine","title":"Preview docs using MkDocs installed on your machine.","text":"<p>If you want, you can also install MkDocs on your machine. See more information about installing MkDocs on your operating system at http://www.mkdocs.org/#installation.</p> <p>The Teams generator documentation currently uses mkdocs-material theme. See more information about installing mkdocs-material on your operating system at https://squidfunk.github.io/mkdocs-material.</p> <p>In order to run documentation locally, you can install MkDocs with pip (the Python package manager) then install the appropriate mkdocs-material version:</p> <p><code>pip install mkdocs mkdocs-material==7.1.7 pymdown-extensions==9.0</code> Once you have MkDocs installed on your machine, in the command line:</p> <p>run <code>cd ./docs</code> to change directory to where the docs are stored run <code>mkdocs serve</code> to start the local web server with MkDocs and view the documentation in the web browser</p>"},{"location":"releases/release-notes/","title":"Release notes","text":"<p>For Release notes please refer to the Yo Teams Github Releases page</p>"},{"location":"releases/releases/","title":"Release overview","text":"<p>This is the release history of the Microsoft Teams Apps generator(<code>generator-teams</code>).</p> <p>Detailed descriptions can always be found in the CHANGELOG.md file or each branch.</p>"},{"location":"releases/releases/#release-notes","title":"Release notes","text":"Version Release date Upgrades Tag Notes 2.7.1 2019-05-08 n/a 2.8.0 2019-05-20 n/a 2.9.0 2019-06-14 to 2.11.1 deprecated 2.9.1 2019-06-15 to 2.11.1 2.10.0 2019-07-18 to 2.11.1 2.11.0 2019-08-06 to 2.11.1 deprecated 2.11.1 2019-08-14 n/a 2.12.0 2020-03-15 to 2.14.0 2.13.0 2020-04-16 to 2.14.0 2.14.0 2020-05-18 to 2.16.0 2.15.0 2020-06-20 to 2.16.0 2.16.0 2020-10-28 2.17.1 2020-12-07 n/a 3.0.0 2021-02-07 to 3.3.0 3.0.1 2021-02-11 to 3.3.0 3.0.2 2021-02-24 to 3.3.0 3.0.3 2021-03-02 to 3.3.0 3.1.0 2021-05-21 to 3.3.0 3.2.0 2021-06-07 to 3.3.0 3.3.0 2021-09-30 to 3.5.0 3.3.0 2021-10-28 to 3.5.0 3.3.0 2021-11-18 to 3.5.0 4.0.0 2022-05-25 n/a"},{"location":"releases/releases/#how-to-install-a-specific-version","title":"How to install a specific version","text":"<p>Execute the following using the version or tag of your choice</p> <p>Using version:</p> <pre><code>npm install -g generator-teams@3.2.0\n</code></pre> <p>Using tag:</p> <pre><code>npm install -g generator-teams@latest\n</code></pre>"},{"location":"releases/releases/#how-to-run-a-specific-version-using-npx","title":"How to run a specific version using npx","text":"<p>Install <code>npx</code> globally</p> <pre><code>npm install -g npx\n</code></pre> <p>Execute the following using the version of your choice</p> <pre><code>npx -p yo -p generator-teams@3.2.0 -- yo teams\n</code></pre>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/","title":"Build a Connector for Microsoft Teams","text":"<p>NOTE: Not updated with version <code>3.0.0</code> changes</p> <p>In this tutorial we will walk through creating a Connector for Microsoft Teams using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#generate-your-project","title":"Generate your project","text":"<p>In a command prompt create a new folder called <code>my-connector</code> where you will have your project files. Run the <code>yo teams</code> command to start the generation of the project. </p> <p>Follow the instructions and choose the solution name, title and company name of your app. When asked for a manifest version choose version <code>1.5</code>. At the selection of what items you want to use for your project, unselect A Tab and select only A Connector and press Enter. </p> <p>The generator will ask you a few other questions, such as the URL and if you want to include testing and telemetry - choose default value for the URL and opt-out of both testing and telemetry (answer no).</p> <p>When asked what type of Connector you would like to use, choose A new Connector hosted in this solution. </p> <p>Following this you will be asked for a Connector Id, choose the default value by pressing Enter. We will update this value later.</p> <p>Finally you will be asked for the name of your Connector, specify the name that you would like to be shown in Microsoft Teams. For this tutorial you can use My Connector. Once this is done the generator will create all necessary files and install the required npm packages.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#register-a-connector-in-the-connector-portal","title":"Register a Connector in the Connector Portal","text":"<p>Next step is to register a Connector in the Outlook Connector portal. You will have all the details in the README file that has been generated by the project (<code>./README-myConnector.md</code>).</p> <p>Open a web browser and navigate to https://outlook.office.com/connectors/publish. You have to be an Office 365 admin to be able to do this.</p> <p>Click on New Connector to create and register the Connector, and the fill in information as follows:</p> <p>NOTE: we will use XXX.ngrok.io as a temporary URL, and replace that later, so we can get the ID of the Connector</p> <ul> <li>Connector name - the name of your Connector (My Connector)</li> <li>Logo - you have to upload a logo</li> <li>Short description - a short description of your connector</li> <li>Detailed description - a longer more detailed description</li> <li>Company website - the URL of your public web site (https://XXX.ngrok.io)</li> <li>Configuration page for your Connector - the configuration page (https://XXX.ngrok.io/myConnector/config.html)</li> <li>Valid domains - all domains used by your connector (https://XXX.ngrok.io/)</li> <li>Do you wnat to enable actions on your Connector cards - select Yes</li> <li>Actions URL - the URL to be used for actions (https://XXX.ngrok.io/api/connector)</li> <li>I accept the terms and conditions... - check this</li> </ul> <p>When done press select Save. </p> <p>To get the ID of your Connector you can copy it from the URL, or choose to download the Teams manifest, using the button on the right. </p> <p>NOTE: you have to register your Connector in the same tenant as you are going to test the Connector. If not, you have to go through Publishing the Connector to the store - making it public.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#update-your-project","title":"Update your project","text":"<p>Open up your project by typing <code>code .</code> (assuming you are using Visual Studio code) in the folder where you created your project.</p> <p>Open the <code>.env</code> file and locate the <code>CONNECTOR_ID</code> token. Replace the empty GUID with the Connector ID you copied from the Connector portal and save the file. .</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#start-the-application-locally","title":"Start the application locally","text":"<p>Execute the <code>gulp ngrok-serve</code> command in the folder where your project was created. This will create an ngrok tunnel to your local machine, and dynamically generate a public URL for your project. When the command is starting you will see the temporary ngrok host name listed. .</p> <p>Copy the host name and return to the Connector portal and replace the <code>XXX.ngrok.io</code> with the real generated host name.</p> <p>NOTE: Since this is a temporary and dynamic URL you need to update the Connector portal each and every time you start <code>ngrok-serve</code>. It is recommended to use fixed ngrok names (a paid service) or to publish your application to a well-known host. Also be aware that when you change the URL it might take some time for the changes to reflect.</p> <p>.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#side-load-the-application","title":"Side load the application","text":"<p>Open up Microsoft Teams and create a new Team. Click on the Teams name and select Apps to side load your application. In the lower right corner select Upload a custom app and then browse to your project folder and the subfolder called package and locate the <code>my-connector.zip</code> file. Select the file and choose to upload it.</p> <p>Go to the General channel and click on ... &gt; Connectors. Scroll all the way down to the end, and you will see your custom connector. Click on Configure. .</p> <p>The configuration interface is being loaded and you are asked to choose a color, notice how the Save button is being enabled and then finally and then click Save. You have now configured your custom connector and you can close the Connectors modal dialog.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#test-the-connector","title":"Test the connector","text":"<p>When the project was generated a test end-point for your connector was created. You can invoke by navigating to the generated ngrok hostname and append <code>/api/connector/ping</code>.  .</p> <p>This HTTP GET request should invoke all your configured connectors and send a message to the channel where configured. Return to the General channel and verify that the Connector card has been added as a new conversation. .</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#custom-implementations","title":"Custom implementations","text":""},{"location":"tutorials/build-a-connector-for-microsoft-teams/#modify-the-configuration-dialog","title":"Modify the configuration dialog","text":"<p>The configuration dialog is implemented as a React component which is located at <code>./src/app/scripts/myConnector/MyConnectorConfig.tsx</code>. The default implementation implements a drop down with a selection of colors. You can modify this dialog as your specific application requires. To persist the settings of your configuration you modify the <code>registerOnSaveHandler</code> callback in the <code>componentWillMount</code>.</p>"},{"location":"tutorials/build-a-connector-for-microsoft-teams/#modify-the-connector-card","title":"Modify the Connector card","text":"<p>The Connector cards are implemented server side, in the <code>./src/app/myConnector/myConnector.ts</code> file. This file contains two methods. The <code>Connect</code> method is used by the Connector when adding a new Connector. The Outlook.com portal (which is responsible for sending the saved state to your application) is posting to the <code>/api/connector/connect/</code> endpoint (the <code>Connect</code> method) where you are responsible for persisting any custom information.</p> <p>The other method called <code>Ping</code> is for testing purposes only (you should remove its contents for production systems) and will upon invoke call all the registered connectors and send a card to them, also defined/created in the <code>Ping</code> implementation.</p>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/","title":"Build a SharePoint Online Provider Hosted Web Part","text":"<p>NOTE: required <code>generator-teams</code> version <code>2.8.0</code> or higher.</p> <p>NOTE: Not updated with version <code>3.5.0</code> changes</p> <p>This tutorials will guide you through the steps on how to create a Microsoft Teams app with a configurable tab that you can upload to the SharePoint App Catalog and use as a web part or as a single part app page.</p> <p>The use cases for this is:</p> <ul> <li>You are already building an application for Microsoft Teams and want to reuse it in SharePoint Online</li> <li>You have requirements on server side rendering or similar requirements that cannot be met with pure JavaScript and SharePoint Framework</li> <li>You're designing a web part that you want to host in an iframe in SharePoint Online.</li> </ul>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#generate-your-project","title":"Generate your project","text":"<p>Start the Microsoft Teams App generator by invoking the <code>yo teams</code> command. Follow the instructions and input name of your solution and package. Choose a schema version that is <code>1.4</code> or higher and then select to create a Tab.</p> <p>Fill in the URL of where you will host the application and optionally add tests and telemetry, and then type the name of your Tab - which will also be the name of your Web Part in SharePoint.</p> <p>When the generator asks if you want to use Quick Scaffolding answer no. If you choose yes you will not be asked about SharePoint Online support and manually have to update your manifest later.</p> <p>When being asked if you want the tab to be available in SharePoint - answer yes and then choose if you want your tab to be available as a web part and/or as a full page application. Once you have selected that the generator will scaffold your project.</p> <p></p>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#inspect-the-generated-code","title":"Inspect the generated code","text":"<p>The code is generated in the same way as in the Build your first Microsoft Teams App tutorial with the only difference being in the manifest file.</p> <p>Open the manifest file (<code>./src/manifest/manifest.json</code>) and under <code>configurableTabs</code> you should see an additional two attributes: <code>sharePointPreviewImage</code> and <code>supportedSharePointHosts</code>. The first property specify a preview image (also being scaffolded into the project) to be shown for full page apps and the second attribute specifies if you want to present the Tab as a web part or a full page application, or both. </p> <p>NOTE: you can modify the manifest on an existing tab project to enable support for SharePoint Online.</p>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#modify-the-code","title":"Modify the code","text":"<p>NOTE: This is a temporary workaround</p> <p>Currently the <code>useTeams</code> hook will not correctly return the <code>context</code> object while hosted in SharePoint Online and you have to modify the code in the configuration React component (under <code>./src/client/tabname/tabnameConfig.tsx</code>) as done in the following example, note the else statement:</p> <pre><code>useEffect(() =&gt; {\n    if (context) {\n        setText(context.entityId);\n        entityId.current = context.entityId;\n        microsoftTeams.settings.registerOnSaveHandler(onSaveHandler);\n        microsoftTeams.settings.setValidityState(true);\n        microsoftTeams.appInitialization.notifySuccess();\n    } else {\n        microsoftTeams.initialize();\n        microsoftTeams.getContext( c =&gt;{\n            setText(c.entityId);\n            microsoftTeams.settings.registerOnSaveHandler(onSaveHandler);\n            microsoftTeams.settings.setValidityState(true);\n        });\n    }\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [context]);\n</code></pre>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#run-the-application-using-ngrok-serve","title":"Run the application using <code>ngrok-serve</code>","text":"<p>For this tutorial we will use the <code>gulp ngrok-serve --debug</code> command to temporarily generate an ngrok public url to host your application. Note that as soon as you abort the gulp command and run it again, a new URL will be generated and you have to upload the application once again to the SharePoint App Catalog.</p> <p>When you execute <code>gulp ngrok-serve --debug</code> the app will generate a random ngrok public URL and use that URL to package the manifest, into <code>./package/&lt;manifest&gt;.zip</code>. It will also start a local web server to host your app.</p>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#upload-the-application-to-the-sharepoint-online-app-catalog","title":"Upload the application to the SharePoint Online App Catalog","text":"<p>Upload the generated manifest file (<code>./package/&lt;manifest&gt;.zip</code>) to the SharePoint Online App Catalog and a trust the application. Also select the checkbox to make the solution available to all site collections, and select Deploy.</p> <p></p>"},{"location":"tutorials/build-a-sharepoint-online-provider-hosted-web-part/#add-the-web-part-to-a-page-in-sharepoint-online","title":"Add the web part to a page in SharePoint Online","text":"<p>Create a new Site Collection or use anyone you already have and in that site create a new page. From the Web Part gallery locate your tab/web part using the name you entered when you created the project and add it to the page.</p> <p></p> <p>An alternate option, if you specified that you wanted a full page experience, is when creating the new page select Apps, instead of a page template, and there locate your Teams Tab.</p> <p>When adding the Web Part to the page you will see the Microsoft Teams Tab configuration dialog, inside of SharePoint, and you can configure your tab. Select Save when done. Finish the tutorial by selecting to Publish the page.</p> <p>Your Tab is now rendered in SharePoint:</p> <p></p>"},{"location":"tutorials/build-a-tab-with-sso-support/","title":"Build a Tab with Single-Sign-On Support","text":"<p>NOTE: required <code>generator-teams</code> version <code>2.13.0</code> or higher.</p> <p>NOTE: Not updated with version <code>3.0.0</code> changes</p> <p>This tutorial will take you through the necessary steps and configuration that you need to to in Azure Active Directory and in Microsoft Teams in order to create a Microsoft Teams Tab single-sign-on experience.</p>"},{"location":"tutorials/build-a-tab-with-sso-support/#preparations","title":"Preparations","text":"<p>Before you start configuring and scaffolding your project you need to ensure that decide on where you want to host your Microsoft Teams tab. A Tab is a web page hosted somewhere and it has to be hosted on a publicly available web site. To be able to support the Tab SSO features your Tab also has to be hosted on a well-known address, such as <code>https://myteamsapp.com/tab.html</code>. The important thing here is that the domain name can't change and you are not allowed to use any web site hosted on <code>azurewebsites.net</code> (due to security constraints).</p> <p>For this tutorial we will take advantage of the paid service ngrok service which allows us to proxy the HTTP calls from a well-known publicly available domain to our local server. However this is not for production builds, but the concept is the same.</p>"},{"location":"tutorials/build-a-tab-with-sso-support/#set-up-your-azure-ad-application","title":"Set up your Azure AD application","text":"<p>The first thing that we need to do is to register a new Azure Active Directory application in the Azure AD portal, that will represent your Microsoft Teams tab. You do this by signing in to https://aad.portal.azure.com using a set of credentials that is allowed to register new applications. Then navigate to Azure Active Directory and chose App Registrations in the left hand side menu.</p> <p>Create a new application by clicking on + New registration - on this first screen you choose the name of your application and also what account types you would like to support - choose any of the Account sin any organizational directory... options. Finally click on Register.</p> <p></p> <p>After the registration you will be redirected to the Application page where you can find the Application (client) ID, copy this ID into a temporary location such as notepad as you will need it shortly.</p> <p></p> <p>The next thing we need to do is to go to Expose an API and then on Application ID URI click on Set. This will allow you to configure the Application ID URI which is one of the key configurations of your SSO Tab. The Application ID URI MUST have the following format: <code>api://&lt;your host name&gt;/&lt;application id&gt;</code>. That is you need to use the fully qualified domain name you prepared for your tab together with the Application/Client ID to construct that Application ID URI. Microsoft Teams will verify this at runtime, so you MUST use your domain name in the App ID URI. If you're using test, stage and production environments you should create different Azure AD Applications for them - as an Azure AD App can only have one Application ID URI. Once set you should store this App ID URI, together with the Client ID - as we will need them when scaffolding our project later.</p> <p></p> <p>Next step is to expose a Scope and you create it by clicking at Add a scope. Name it <code>access_as_user</code> and choose that both Admins and users can consent. Then you need to write the user friendly consent display names and descriptions before clicking Add scope.</p> <ul> <li><code>1fec8e78-bce4-4aaf-ab1b-5451cc387264</code> - the ID used by the Microsoft Teams desktop and mobile application</li> <li><code>5e3ce6c0-2b1f-4285-8d4b-75ee78787346</code> - the ID use by the Microsoft Teams web application</li> </ul> <p></p> <p>The final configuration we need to do is to grant permissions to the Tab App registration. This is done by navigating to API Permissions and then click on Add a permission. All the permissions we need is in Microsoft Graph, so select that and then we also need to choose that we want to use Delegated Permissions. The permissions you need to select are the following:</p> <ul> <li><code>User.Read</code> - should already be selected when the app was created</li> <li><code>email</code></li> <li><code>offline_access</code></li> <li><code>openid</code></li> <li><code>profile</code></li> </ul> <p></p> <p>That's it! Now we are ready to scaffold out our Teams Tab project.</p>"},{"location":"tutorials/build-a-tab-with-sso-support/#generate-your-project","title":"Generate your project","text":"<p>Start the Microsoft Teams App generator by invoking the <code>yo teams</code> command. Follow the instructions and input name of your solution and package. Choose a schema version that is <code>1.5</code> or higher and then select to create a Tab.</p> <p>When asked about the URL where you will host this solution insert the exact URL you used when configuring the Application ID URI previously.</p> <p>Note: we can change this at a later stage by modifying the <code>.env</code> file.</p> <p>Optionally add support for testing and application insights. Choose your name for the Tab and then choose to create a Configurable tab and choose the default options for the rest until you get to the Do you required Azure AD Single-Sign-On support for the Tab? then choose Yes.</p> <p>You will now be asked first for the Application ID and then the Application ID URI that was generated when you registered the App. If you don't remember them or forgot to take a note of them - these values are always available fromt the Application registration summary page.</p> <p>Finally opt-out of enabling the SharePoint Online integration by selecting No, and then wait for the project to scaffold and to install all npm packages.</p> <p></p>"},{"location":"tutorials/build-a-tab-with-sso-support/#inspect-the-generated-code","title":"Inspect the generated code","text":"<p>Open up the generated project in your favorite code editor and open the manifest file (<code>./src/manifest/manifest.json</code>) and scroll down to the last few lines. You will see an addition of a new configuration there - which tells Teams that we want to use Single-Sign-On using the specified Azure AD application.</p> <pre><code>\"webApplicationInfo\": {\n  \"id\": \"{{SSODEMO_APP_ID}}\",\n  \"resource\": \"{{SSODEMO_APP_URI}}\"\n}\n</code></pre> <p>NOTE: as usual the replaceable parameters can be found in the <code>.env</code> file.</p> <p>The actual tab page is found under <code>./src/app/scripts/&lt;your tab name&gt;/&lt;your tab name&gt;.tsx</code>. If you inspect this React based page you will notice that the default generated code uses the <code>microsoftTeams.authentication.getAuthToken()</code> to retrive a token when the page is loaded. If all is configured correctly this will return an identity token that can be used to validate the user and in the default case displaying the name of the user.</p> <p>NOTE: this token can not be used to retrieve information from for instance Microsoft Graph. In order to do so you need to implement server side support for the Azure AD on-behalf-of flow to exchange this identity token for another token.</p>"},{"location":"tutorials/build-a-tab-with-sso-support/#run-the-application-using-ngrok-serve","title":"Run the application using <code>ngrok-serve</code>","text":"<p>In this demo we decided to use ngrok to create a publicly available domain and before running the Teams app we need to configure ngrok by registering the domain we specified previously - and then update the <code>.env</code> file with the ngrok subdomain as well as the ngrok auth key.</p> <p></p> <p>NOTE: this registration of domains requires a paid subscription to ngrok. If you're using the free version you have to start the application using <code>gulp ngrok-serve</code> and then use the temporary domain name and update your Azure AD app registration with that.</p> <p>To start the application and to generate the manifest run <code>gulp ngrok-serve</code> in the command prompt. Once the command line shows that the application is up and running you can continue with side loading the application into a newly create Microsoft Teams team.</p>"},{"location":"tutorials/build-a-tab-with-sso-support/#sideload-and-test-the-application","title":"Sideload and test the application","text":"<p>Go to the Team where you want to test the application, hover over the Team icon/log and choose the Apps icon. In the lower right hand corner choose to Upload a custom app and choose the packaged manifest that was generated (<code>./package/&lt;manifest&gt;.zip</code>), and then click Add to finalize the side loading.</p> <p>Go to a channel in your Team and choose to add a new Tab. You will find your application amongst the available tabs, choose it and follow the instructions to configure it and then click Add.</p> <p>The Tab will now be loaded and within a few seconds you will see that the Tab will write out your name - that it retrieved from the identity token and it shows that everything is working as expected.</p> <p></p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/","title":"Build your First Microsoft Teams App","text":"<p>NOTE: This tutorial is adapted for <code>generator-teams</code> version <code>3.0.0</code> or higher.</p> <p>In this tutorial we will walk through creating your very first Microsoft Teams app using the Microsoft Teams Yeoman generator. It assumes that you have enabled side-loading of Microsoft Teams apps in Microsoft Teams as well as have installed all the prerequisites.</p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/#generate-your-project","title":"Generate your project","text":"<p>Open up a command prompt and create a new directory where you want to create your project and in that directory type the command <code>yo teams</code>. This will start the Teams Apps generator and you will be asked a set of questions. </p> <p>The first question is about your project name, you can leave it as is by pressing enter. Next question asks you if you want to create a new directory or use the current one. As we already are in the directory we want, we just press enter.</p> <p>The following step asks for a title of your project, this title will be used in the manifest and description of your app. And then you will be asked for a company name, which also will be used in the manifest.</p> <p>The fifth question asks you about what version of the manifest you want to use. For this tutorial select <code>v1.8</code>, which is the current general available schema.</p> <p>The next question asks you if you want to use Quick scaffolding - if you choose Yes a fewer set of questions will be asked and if you choose No a more advanced set of questions will follow. Choose yes for this tutorial.</p> <p>After this the generator will ask you for what items you want to add to your project. You can select a single one or any combination of items. For now, just select a Tab.  Based on what items you select, you will be asked a set of follow-up questions.</p> <p>Now you need to enter a URL of where you will host your solution. This can be any URL, but by default the generator suggests an Azure Web Sites URL.</p> <p>The generator has a lot of built-in advanced features that you can opt-in or opt-out of, also based on your Quick scaffolding choice. For this tutorial choose the default options, except when being asked about support for single-sign-on.</p> <p>Once all questions is answered the generator will scaffold the required files and finally install all the npm packages. This will take a minute or two.</p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/#add-some-code-to-your-tab","title":"Add some code to your tab","text":"<p>Once the generator is done you can open up the solution in your favorite code editor. Take a minute or two and familiarize yourself with how the code is organized - you can read more about that in the Project Structure documentation.</p> <p>Your Tab will be located in the <code>./src/client/helloWorldTab/HelloWorldTab.tsx</code> file. This is the TypeScript React based functional component for your Tab. Locate the <code>return</code> statments and replace the code inside the second <code>&lt;Flex.Item&gt;</code> control so it looks like this:</p> <pre><code>&lt;Flex.Item&gt;\n    &lt;div&gt;\n    Hello World! Yo Teams rocks!\n    &lt;/div&gt;\n&lt;/Flex.Item&gt;\n</code></pre> <p>Save the file and return to the command prompt.</p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/#build-your-app","title":"Build your app","text":"<p>You can now build your project. This is done in two steps (or one step, see below).</p> <p>First you need to create the Teams App manifest file, that you upload/sideload into Microsoft Teams. This is done by the Gulp task <code>gulp manifest</code>. This will validate the manifest and create a zip file in the <code>./package</code> directory.</p> <p>To build your solution you use the <code>gulp build</code> command. This will transpile your solution into the <code>./dist</code> folder.</p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/#run-your-app","title":"Run your app","text":"<p>To run your app you use the <code>gulp serve</code> command. This will build and start a local web server for you to test your app. The command will also rebuild the application whenever you save a file in your project.</p> <p>You should now be able to browse to <code>http://localhost:3007/helloWorldTab/</code> to ensure that your tab is rendering. However, not in Microsoft Teams yet. </p>"},{"location":"tutorials/build-your-first-microsoft-teams-app/#run-your-app-in-microsoft-teams","title":"Run your app in Microsoft Teams","text":"<p>Microsoft Teams does not allow you to have your app hosted on localhost, so you need to either publish it to a public URL or use a proxy such as ngrok.</p> <p>Good news is that the scaffolded project has this built-in. When you run <code>gulp ngrok-serve</code> the ngrok service will be started in the background, with a unique and public DNS entry and it will also package the manifest with that unique URL and then do the exact same thing as <code>gulp serve</code>.</p> <p>After running <code>gulp ngrok-serve</code>, create a new Microsoft Teams team and when it is created click on the Team name, to go to the teams settings and then select Apps. In the lower right corner you should see a link Upload a custom app, select it and then browse to your project folder and the subfolder called <code>package</code>. Select the zip file in that folder and choose open. Your App is now sideloaded into Microsoft Teams. </p> <p>Go back to the General channel and select + to add a new Tab. You should see your tab in the list of tabs.</p> <p>Choose your tab and follow the instructions to add it. Notice that you have a custom configuration dialog, for which you can edit the source. Select Save to add your tab to the channel. Once done your tab should be loaded inside Microsoft Teams! </p> <p>Congrats! You built and deployed your first Microsoft Teams App</p> <p>Yo Teams</p>"},{"location":"user-guide/bot-configuration/","title":"Bots and Messaging Extension Configuration","text":"<p>If you are creating a bot or a messaging extension as a part of your Microsoft Teams app you also need to register an Azure Bot service in Microsoft Azure, before you configure and run your application.</p>"},{"location":"user-guide/bot-configuration/#how-to-prepare-and-create-resources-in-microsoft-azure","title":"How to prepare and create resources in Microsoft Azure","text":"<ul> <li>Create or use an existing Resource Group</li> <li>Add a new Azure Bot resource to the resource group</li> <li>Fill in the basic details</li> <li>In the Type of App you must choose Multi-tenant or Single-tenant. Using a Managed Identity is currently not supported</li> <li>After the resource has been created you need to update the Messaging endpoint in the Bot Configuration. It should contain the URL of where you are hosting your Teams Application and point to the <code>/api/messages</code>endpoint.Example: <code>https://0cbfd984d7b1.ngrok.io/api/messages</code></li> <li>Ensure to configure the Microsoft Teams channel under Channels. If you're building a Messaging Extension for Outlook you also need to enable the Outlook channel.</li> <li>Under Configuration you should take a note of the Microsoft App ID and also click on Manage and under Certificate &amp; secrets create a new secret.</li> <li>Copy the App ID and secret and update your <code>.env</code> file as follows:</li> </ul> <pre><code>MICROSOFT_APP_ID=&lt;The Microsoft App Id for the bot&gt;\nMICROSOFT_APP_PASSWORD=&lt;The secret you created&gt;\n</code></pre>"},{"location":"user-guide/codespaces/","title":"Development with Github Codespaces","text":"<p>The Yo Teams Gulp tasks will automatically detect if you're running a Yo Teams project inside a Github Codespace.</p> <p>The <code>PUBLIC_HOSTNAME</code> will automatically be set as the public DNS name of your Github Codespace when running <code>gulp codespace-serve</code>. The only manual step is to make the exposed port (3007 by default) Public (default is private).</p>"},{"location":"user-guide/connector-configuration/","title":"Connector Configuration","text":"<p>The Yo Teams generator supports scaffolding custom Office 365 Connectors as a part of the Teams Application.</p>"},{"location":"user-guide/connector-configuration/#configuration","title":"Configuration","text":"<p>All Connectors has to be registered in the Connectors Developer Dashboard, which you have to log in to using a Microsoft Organizational Account, a Microsoft Account (MSA) will not work. If you're building an internal enterprise connector you only have to register it, and not publish it.</p> <p>You need to specify the following details:</p> <ul> <li>Connector Name</li> <li>Configuration Page - must contain the full URL to the <code>/config.html</code> for your scaffolded connector.</li> <li>Valid domains --  must contain the domain name of your Teams App</li> <li>Enable Actions on your Connector Cards - must be set to Yes</li> <li>Action URL - must contain the full URL to the <code>/api/connector</code> endpoint</li> </ul> <p>After creating or updating the Connector you must copy the Guid of the Connector (found in the URL when configuring the Connector) and paste that into your <code>.env</code> file:</p> <pre><code>CONNECTOR_ID=&lt;your connector guid&gt;\n</code></pre>"},{"location":"user-guide/connector-configuration/#scaffolded-files-details","title":"Scaffolded files details","text":"<p>The following files will be scaffolded for a Connector</p> <ul> <li><code>./src/server/&lt;Connector&gt;/&lt;Connector&gt;.ts</code> - implementation of the Connector that manages registering new subscriptions (<code>Connect()</code>) as well as a sample method to send a message to all subscribers (<code>Ping()</code>).</li> <li><code>./src/public/&lt;Connector&gt;/config.html</code> - the configuration of the Connector .</li> <li><code>./src/client/&lt;Connector&gt;Config.tsx</code> - React component of the configuration page page.</li> </ul>"},{"location":"user-guide/connector-configuration/#connector-api-end-points","title":"Connector API end-points","text":"<p>For the Connector you will have two generated end-points, defined in <code>./src/server/server.ts</code>.</p> <ul> <li><code>/api/connector/connect</code> - this is the end-point that is connected to the <code>Connect</code> method of the Connector implementation and is used when registering a Connector. </li> <li><code>/api/connector/ping</code> - this is a test end-point to demonstrate how to invoke the Connector using a simple HTTP GET operation. It is highly recommended that you remove this end-point and implement your own logic for invoking the connector.</li> </ul>"},{"location":"user-guide/deploy-to-teams/","title":"Deployment to Teams App Store","text":"<p>NOTE: requires <code>generator-teams</code> 3.2.0 or later</p> <p>In order to streamline the development cycle Yo Teams 3.2.0 and later includes a plugin to make deployment to Teams App store easier. The <code>yoteams-deploy</code> package is a plugin for the Yo Teams Gulp tasks that adds a new flag to the <code>serve</code> and <code>*-serve</code> tasks, called <code>--publish</code>. </p> <p>When this flag is used the Gulp task will after building the manifest automatically upload the package to the Microsoft Teams App Store. You will the first time this is used be asked to sign in to the tenant of your choice.</p>"},{"location":"user-guide/outgoing-webhook-configuration/","title":"Outgoing Webhook Configuration","text":""},{"location":"user-guide/outgoing-webhook-configuration/#how-to-add-the-outgoing-webhook-to-a-teams-team","title":"How to add the Outgoing Webhook to a Teams team","text":"<p>To add the Outgoing Webhook to a Microsoft Teams team, choose View Team and then choose the Bots tab. In the lower right corner click on Create a outgoing webhook. Then fill in the name, the URL (<code>https://&lt;URL&gt;/api/webhook</code>) and a description and click ok. Once the outgoing webhook is registered you will receive a Security token. Save this token in a secure place for future use, and you wil not be able to retrieve it again. </p>"},{"location":"user-guide/outgoing-webhook-configuration/#security-token-usage","title":"Security token usage","text":"<p>The security token must be added as an environment variable. For development purposes it can be added to the <code>.env</code> file with the property name <code>SECURITY_TOKEN</code> and for Azure you should add it as a new environment variable called <code>SECURITY_TOKEN</code>. These can be configured in the Azure Web App under Application Settings &gt; App Settings.</p>"},{"location":"user-guide/outgoing-webhook-configuration/#notes","title":"Notes","text":"<p>You might receive an error the first time you send a message to the bot, if you just deployed the solution. Outgoing webhooks must answer within 5 seconds.</p>"},{"location":"user-guide/setup-machine/","title":"Setup and prepare your machine","text":"<p>You need to install the following on your machine before starting to use the Teams Generator.</p>"},{"location":"user-guide/setup-machine/#install-node","title":"Install Node","text":"<p>You need to have NodeJS installed on your machine. You should use the latest LTS version.</p>"},{"location":"user-guide/setup-machine/#install-a-code-editor","title":"Install a code editor","text":"<p>You also need a code editor, feel free to use whatever text editor you prefer. However most of this documentation and screenshots refer to using Visual Studio Code.</p>"},{"location":"user-guide/setup-machine/#install-yeoman-and-gulp-cli","title":"Install Yeoman and Gulp CLI","text":"<p>To be able to scaffold projects using the Teams generator you need to install the Yeoman tool as well as the Gulp CLI task manager.</p> <p>Open up a command prompt and type the following:</p> <pre><code>npm install yo gulp-cli --global\n</code></pre>"},{"location":"user-guide/setup-machine/#install-the-microsoft-teams-apps-generator-yo-teams","title":"Install the Microsoft Teams Apps generator - Yo Teams","text":"<p>The Yeoman generator for Microsoft Teams apps are installed with the following command:</p> <pre><code>npm install generator-teams --global\n</code></pre>"},{"location":"user-guide/setup-machine/#install-preview-versions","title":"Install preview versions","text":"<p>If you want to install preview versions of the Teams generator with this command:</p> <pre><code>npm install generator-teams@preview --global\n</code></pre>"},{"location":"user-guide/setup-machine/#possible-issues","title":"Possible issues","text":"<p>If you get this error:</p> <p>This generator (teams:app) requires yeoman-environment at least 3.0.0, current version is 2.10.3, try reinstalling latest version of 'yo' or use '--ignore-version-check' option</p> <p>and you run <code>npm -g outdated</code> you will notice that you are not running the latest version of the yeoman generator. You need to update your global package of yo using <code>npm install yo@latest -g</code>. To update to the latest version of the gulp CLI use <code>npm install gulp-cli@latest -g</code></p>"},{"location":"user-guide/setup-tenant/","title":"Set up your Office 365 tenant","text":"<p>In order to build applications for Microsoft Teams you need to have access to an Office 365 tenant with either global administrator permissions or have a global administrator allow you to do side-loading of apps.</p> <p>Your Microsoft 365 developer program membership entitles you to a special free Microsoft 365 E5 subscription with all the latest Microsoft 365 apps, Enterprise Mobility + Security, Azure AD, and more. You can use this subscription to build a developer sandbox where you can test your apps created with the Teams generator. </p> <p>Set up your free Microsoft 365 E5 developer subscription now!</p>"},{"location":"user-guide/setup-tenant/#enabling-microsoft-teams-apps-and-sideloading","title":"Enabling Microsoft Teams Apps and sideloading","text":"<p>To enable Teams for your tenant and for more invormation see enabling Teams for your organization</p> <p>Enabling custom apps for Microsoft Teams is done via the Microsoft Teams admin center, https://admin.teams.microsoft.com. Use the navigation on the left hand side and choose Teams apps &gt; Setup policies. To allow all users to sideload applications you should modify the Global policy to allow Upload custom apps. To only allow a subset of users to use side loading, then create a new policy with the setting and then assign that policy to the users you want to be able to sideload.</p> <p>For a more detailed guide on this see enable custom Teams apps and turn on custom app uploading</p>"},{"location":"user-guide/upgrading-projects/","title":"Upgrading projects","text":"<p>Starting with Yo Teams version 2.11.0 upgrading from earlier versions of the generator is possible. An upgrade of a project includes the option of upgrading the core build files, which are required by certain features introduced in new versions.</p> <p>Projects can be updated either automatically using the generator or manually.</p> <p>Note: See release notes for upgrade compatibility</p> <p></p>"},{"location":"user-guide/upgrading-projects/#automatically-upgrade-a-project","title":"Automatically upgrade a project","text":"<p>Microsoft Teams apps projects created by Yo Teams (from version 2.9) can automatically be updated by running the generator once again over the project (starting from version 2.11).</p> <p>Always check release notes for individual versions for upgrades, as some does not support upgrading.</p>"},{"location":"user-guide/upgrading-projects/#upgrade-notes","title":"Upgrade notes","text":"<p>NOTE: See each specific release note for more details.</p> <p>When running the generator using <code>yo teams</code> on an existing project you will be prompted if you want to continue - select Yes to continue the upgrade. If the project can be updated the next question asks you if you want to update the yo teams core files - select Yes to allow the generator to update the necessary files. Before you do this you should ensure that you have your source files under source control, so that you can inspect and potentially revert any changes being done by the generator.</p> <p>Once the generator is finished it will update the core files as required.</p> <p>Note: you will only be asked once for updating the core build files. Subsequent executions of the generator on the project will assume an upgrade has been done.</p>"},{"location":"user-guide/upgrading-projects/#manually-upgrading-a-project","title":"Manually upgrading a project","text":"<p>Manually upgrading a project might be required if you have made changes to the core build files or the automatic upgrade fails.</p> <p>To manually upgrade a project the best way is to create a new blank project using the latest generator. Then use a file comparison tool and compare the new project with the one you want to upgrade.</p>"},{"location":"user-guide/using-multiple-manifests/","title":"Using multiple manifest files","text":"<p>NOTE: requires <code>yoteams-build-core</code> 1.1.0 or later</p> <p>Yo Teams supports having multiple manifests files. There are many scenarios where you would like to have multiple manifest files and Teams App packages generated, for instance:</p> <ul> <li>Having one application but multiple Teams Apps, such as one for users and one for admins, but still using the same hosting and solution</li> <li>Working with multiple environments and you want to build different manifests for different environments, including different icons</li> <li>Working with multiple developer environments where <code>validDomains</code> and Tab SSO App Id URI's are different.</li> </ul>"},{"location":"user-guide/using-multiple-manifests/#how-to-use-multiple-manifests-with-yo-teams","title":"How to use multiple manifests with Yo Teams","text":"<p>By default, the scaffolded project will contain one <code>manifest.json</code>, located in <code>./src/manifest/</code>. To add additional manifest files you either create a new <code>.json</code> file and manually create the manifest, or copy the existing manifest into a new file in the same folder.</p> <p>The build tasks <code>manifest</code> and <code>validate-manifest</code> will now work cross all those defined manifest.json files and validate and create a separate package for each of them. The package name will be the name of the <code>packageName</code> in the manifest and only referenced icons and localization files will be included in the package.</p>"},{"location":"user-guide/using-multiple-manifests/#add-this-feature-to-an-existing-project","title":"Add this feature to an existing project","text":"<p>If you scaffolded a project using Yo Teams v 3.0.x then you might need to update the build tools to support this feature. This is done using the following command</p> <pre><code>npm install yoteams-build-core@preview --save-dev\n</code></pre>"},{"location":"user-guide/using-multiple-manifests/#a-word-of-caution","title":"A word of caution","text":"<p>When working with multiple manifests there are a couple of things to keep in mind.</p> <p>If you create a new manifest from a copy of an existing one it is important that you change the <code>packageName</code> so that they are different - as that is used to create the package zip file.</p> <p>If you intend to use the multiple packages in the same environment it is required that you have different <code>id</code>'s in your manifest files.</p>"},{"location":"user-guide/vscode/","title":"Debugging with Visual Studio Code","text":"<p>If the application is started with the <code>--debug</code> flag, then you can use the built-in debug configurations to step through your code.</p> <ul> <li>Debug (Edge) will open up Edge in remote debugging mode and also connect to the server side for debugging</li> <li>Debug (Chrome) will open up Chrome in remote debugging mode and also connect to the server side for debugging</li> <li>Attach to server will only connect to the server side for debugging</li> <li>Launch client (Edge) will only open up Edge in remote debugging mode</li> <li>Launch client (Chrome) will only open up Chrome in remote debugging mode</li> </ul>"}]}